# GridRecall: App Build & Export Guide

This guide outlines the process for converting the GridRecall Next.js web application into an Android app suitable for Google Play Store submission.

## Overview

Since GridRecall is currently a Next.js web application, we need to convert it to a native Android app using a WebView wrapper approach. This method embeds the web application within a native Android container, allowing it to be distributed through the Google Play Store.

## Prerequisites

- Node.js and npm (for building the Next.js app)
- Android Studio (latest version)
- JDK 11 or newer
- Basic knowledge of Android development
- A physical Android device or emulator for testing

## Step 1: Prepare the Next.js Application

1. **Optimize for Mobile**
   - Ensure the app is fully responsive
   - Test on various mobile screen sizes
   - Implement offline functionality if possible using Next.js PWA capabilities

2. **Build for Production**
   ```bash
   # Navigate to your Next.js project directory
   cd /path/to/gridrecall
   
   # Install dependencies if needed
   npm install
   
   # Build for production
   npm run build
   
   # Export static files (if using Next.js static export)
   next export
   ```

3. **Test the Production Build**
   ```bash
   # Serve the production build locally
   npx serve out
   ```
   - Verify all functionality works correctly
   - Test on mobile browsers to ensure responsive design

## Step 2: Create Android WebView Wrapper Project

1. **Create New Android Project**
   - Open Android Studio
   - Click "New Project"
   - Select "Empty Activity"
   - Configure project:
     - Name: "GridRecall"
     - Package name: "com.yourdomain.gridrecall"
     - Language: Kotlin
     - Minimum SDK: API 21 (Android 5.0) or higher

2. **Configure WebView in MainActivity**

   Update `MainActivity.kt`:
   ```kotlin
   package com.yourdomain.gridrecall

   import android.annotation.SuppressLint
   import android.os.Bundle
   import android.webkit.WebSettings
   import android.webkit.WebView
   import android.webkit.WebViewClient
   import androidx.appcompat.app.AppCompatActivity

   class MainActivity : AppCompatActivity() {
       private lateinit var webView: WebView

       @SuppressLint("SetJavaScriptEnabled")
       override fun onCreate(savedInstanceState: Bundle?) {
           super.onCreate(savedInstanceState)
           setContentView(R.layout.activity_main)

           webView = findViewById(R.id.webview)
           webView.webViewClient = WebViewClient()

           // Configure WebView settings
           val webSettings = webView.settings
           webSettings.javaScriptEnabled = true
           webSettings.domStorageEnabled = true
           webSettings.databaseEnabled = true
           webSettings.allowFileAccess = true
           webSettings.allowContentAccess = true
           webSettings.loadsImagesAutomatically = true
           webSettings.cacheMode = WebSettings.LOAD_DEFAULT
           
           // For offline support
           webSettings.setAppCachePath(applicationContext.cacheDir.absolutePath)
           webSettings.setAppCacheEnabled(true)
           
           // Load the app
           webView.loadUrl("file:///android_asset/www/index.html")
       }

       // Handle back button navigation within WebView
       override fun onBackPressed() {
           if (webView.canGoBack()) {
               webView.goBack()
           } else {
               super.onBackPressed()
           }
       }
   }
   ```

3. **Update Layout XML**

   Update `activity_main.xml`:
   ```xml
   <?xml version="1.0" encoding="utf-8"?>
   <androidx.constraintlayout.widget.ConstraintLayout 
       xmlns:android="http://schemas.android.com/apk/res/android"
       xmlns:app="http://schemas.android.com/apk/res-auto"
       xmlns:tools="http://schemas.android.com/tools"
       android:layout_width="match_parent"
       android:layout_height="match_parent"
       tools:context=".MainActivity">

       <WebView
           android:id="@+id/webview"
           android:layout_width="match_parent"
           android:layout_height="match_parent"
           app:layout_constraintBottom_toBottomOf="parent"
           app:layout_constraintEnd_toEndOf="parent"
           app:layout_constraintStart_toStartOf="parent"
           app:layout_constraintTop_toTopOf="parent" />

   </androidx.constraintlayout.widget.ConstraintLayout>
   ```

4. **Update AndroidManifest.xml**
   ```xml
   <?xml version="1.0" encoding="utf-8"?>
   <manifest xmlns:android="http://schemas.android.com/apk/res/android"
       package="com.yourdomain.gridrecall">

       <uses-permission android:name="android.permission.INTERNET" />
       <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />

       <application
           android:allowBackup="true"
           android:icon="@mipmap/ic_launcher"
           android:label="@string/app_name"
           android:roundIcon="@mipmap/ic_launcher_round"
           android:supportsRtl="true"
           android:theme="@style/Theme.GridRecall">
           
           <activity
               android:name=".MainActivity"
               android:exported="true"
               android:configChanges="orientation|screenSize">
               <intent-filter>
                   <action android:name="android.intent.action.MAIN" />
                   <category android:name="android.intent.category.LAUNCHER" />
               </intent-filter>
           </activity>
       </application>
   </manifest>
   ```

## Step 3: Include Web App in Android Project

1. **Create Assets Directory**
   - In Android Studio, right-click on the `app` module
   - Select New > Folder > Assets Folder
   - Create a subdirectory: `assets/www`

2. **Copy Next.js Export**
   - Copy all files from your Next.js `out` directory
   - Paste them into the `assets/www` directory in your Android project

3. **Update File Paths if Needed**
   - Ensure all relative paths in your HTML, CSS, and JavaScript files are correct
   - If needed, update the base path in your Next.js config before exporting

## Step 4: Add App Icon and Splash Screen

1. **Create App Icon**
   - Use the icon design from `icon_and_graphics_specifications.txt`
   - Generate icons for different densities using Android Studio's Asset Studio:
     - Right-click on `res` folder
     - Select New > Image Asset
     - Configure and generate icons

2. **Create Splash Screen**
   - Create a splash screen layout: `res/layout/splash_screen.xml`
   - Update `styles.xml` to use the splash screen theme
   - Modify `MainActivity` to transition from splash screen to main activity

## Step 5: Test the Android App

1. **Run on Emulator**
   - Click "Run" in Android Studio
   - Select an emulator or connected device
   - Verify the app loads correctly and all functionality works

2. **Test on Physical Devices**
   - Test on multiple device sizes and Android versions
   - Verify performance and responsiveness
   - Check for any WebView-specific issues

## Step 6: Prepare for Release

1. **Configure App Signing**
   - Generate a signing key:
     ```bash
     keytool -genkey -v -keystore gridrecall.keystore -alias gridrecall -keyalg RSA -keysize 2048 -validity 10000
     ```
   - Configure Gradle for app signing

2. **Update build.gradle**
   - Set application ID: `com.yourdomain.gridrecall`
   - Set version code and version name
   - Configure signing config

3. **Build Release APK/Bundle**
   - In Android Studio, select Build > Generate Signed Bundle/APK
   - Choose Android App Bundle (recommended) or APK
   - Select your keystore and provide credentials
   - Choose release build variant
   - Complete the build process

## Step 7: Test Release Build

1. **Install Release Build**
   - Install the signed APK on test devices
   - Verify all functionality works correctly
   - Check for any performance issues

2. **Perform Final QA**
   - Test all features thoroughly
   - Verify offline functionality (if implemented)
   - Check app behavior during interruptions (calls, notifications)

## Step 8: Prepare for Google Play Submission

1. **Generate App Bundle**
   - If not already done, generate a signed Android App Bundle (.aab)
   - This is the preferred format for Google Play submissions

2. **Gather Store Assets**
   - Prepare all screenshots and graphics as specified in the screenshot_specifications.txt
   - Finalize app description and other metadata

3. **Follow Submission Guide**
   - Refer to `google_play_submission_guide.txt` for detailed submission instructions

## Alternative Approaches

If the WebView approach doesn't meet your needs, consider these alternatives:

1. **React Native**
   - Rewrite the app using React Native for a more native experience
   - Leverage your React knowledge while gaining native performance

2. **PWA on Play Store**
   - Use Google's Trusted Web Activity (TWA) to publish your PWA to the Play Store
   - Requires HTTPS and service workers

3. **Capacitor/Cordova**
   - Use Capacitor or Cordova to wrap your web app with additional native functionality
   - Provides access to native device features through plugins

## Troubleshooting Common Issues

1. **White Screen/Blank Screen**
   - Check WebView configuration
   - Verify file paths in assets directory
   - Enable WebView debugging

2. **JavaScript Not Working**
   - Ensure JavaScript is enabled in WebView settings
   - Check for console errors using remote debugging

3. **Offline Functionality Issues**
   - Implement service workers in your Next.js app
   - Configure proper caching in WebView

4. **Performance Problems**
   - Optimize your web app for mobile
   - Consider using hardware acceleration in WebView
   - Minimize DOM manipulations and animations
